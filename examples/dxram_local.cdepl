#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

#!/bin/bash

#
# Example for (basic) dxram deployment
#

TOTAL_NODES=2

# Cluster type and user selected
CLUSTER_TYPE="local"
CLUSTER_USER="$USER"

# Parameters for zookeeper
ZK_PATH="/home/${CLUSTER_USER}/zookeeper"
ZK_NODE=0
ZK_PORT=2181

# DXRAM parameters
DX_PATH="/home/${CLUSTER_USER}/dxram"

DX_PEER_PORT_START="22222"

cdepl_script_process_cmd_args()
{
	local stub=""
	local arg_1="$1"
	local arg_2="$2"
	if [[ ! -z "${arg_1// }" ]]; then
		ZK_PATH=$arg_1
	fi
	if [[ ! -z "${arg_2// }" ]]; then
		DX_PATH=$arg_2
	fi
}

cdepl_script_cluster_node_setup()
{
	# Set the log level to output debug info
	util_log_set_level "$UTIL_LOG_LEVEL_DEBUG"

	# Init the cluster environment to deploy to
	cdepl_cluster_init $CLUSTER_TYPE $CLUSTER_USER

	# Load application modules of apps you want to deploy
	cdepl_cluster_app_load "zookeeper"
	cdepl_cluster_app_load "dxram"

	# Alloc total number of nodes for this deployment
	cdepl_cluster_node_alloc $TOTAL_NODES

		# Reserve nodes 0, 1, 2 exclusive (all resources available)
	for i in `seq 0 2`; do
		cdepl_cluster_node_excl $i
	done

	# Set specific parameters for node 3
	cdepl_cluster_node_mem 3 8192
	cdepl_cluster_node_cpus 3 6
	cdepl_cluster_node_network 3 "ib"

	# Set our output path for log files and configurations 
	# for the applications deployed
	cdepl_deploy_setup_out_path $CLUSTER_USER
}

cdepl_script_deploy()
{
	# Initilize zookeeper deployment
	cdepl_app_zookeeper_init $ZK_PATH

	# Ensure that no (old) zookeeper instance is running on any node
	for i in `seq 0 $((TOTAL_NODES - 1))`; do
		cdepl_app_zookeeper_cleanup $i
	done

	# Start zookeeper instance and wait until started
	cdepl_app_zookeeper_start $ZK_NODE $ZK_PORT
	cdepl_app_zookeeper_wait_started $ZK_NODE

	# Cleanup of failed startups in zookeeper
	cdepl_app_zookeeper_remove $ZK_NODE "/dxram"

	# Initialize dxram deployment
	cdepl_app_dxram_init $DX_PATH $ZK_NODE $ZK_PORT
	
	# Kill any still running instances from previous deployments
	cdepl_app_dxram_node_cleanup 0 $((TOTAL_NODES - 1))

	# Apply node settings before starting any nodes
	cdepl_app_dxram_node_type 0 "S"

	for i in `seq 1 $((TOTAL_NODES - 1))`; do
		cdepl_app_dxram_node_type $i "P"
		cdepl_app_dxram_peer_kvss $i 4096
		# When running localhost, we have to assign different ports for the peers
		cdepl_app_dxram_node_port $i $DX_PEER_PORT_START
		DX_PEER_PORT_START=$((DX_PEER_PORT_START + 1))
	done

	# Start superpeer and wait before starting peers
	cdepl_app_dxram_start_node 0
	cdepl_app_dxram_node_wait_started 0

	# Start all peers
	cdepl_app_dxram_start_node 1 $((TOTAL_NODES - 1))

	# Wait for all peers to be started
	for i in `seq 1 $((TOTAL_NODES - 1))`; do
		cdepl_app_dxram_node_wait_started $i
	done

	# We are done

	# Wait a moment before cleaning up
	sleep 5
}

cdepl_script_cleanup()
{
	# Kill all dxram instances
	cdepl_app_dxram_node_cleanup 0 $((TOTAL_NODES - 1))
	
	# Kill zookeeper
	cdepl_app_zookeeper_cleanup 0
}
